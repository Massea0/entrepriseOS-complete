version: '3.8'

services:
  # Application Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    image: enterpriseos:latest
    container_name: enterpriseos-app
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_ENVIRONMENT=production
    env_file:
      - .env.production
    volumes:
      - ./public:/app/public
      - app-cache:/app/.next/cache
    networks:
      - enterpriseos-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: enterpriseos-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    networks:
      - enterpriseos-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: enterpriseos-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - enterpriseos-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: enterpriseos-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - enterpriseos-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: enterpriseos-grafana
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - enterpriseos-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: enterpriseos-loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    networks:
      - enterpriseos-network
    command: -config.file=/etc/loki/local-config.yaml

  # Log Shipper - Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: enterpriseos-promtail
    restart: always
    volumes:
      - /var/log:/var/log:ro
      - nginx-logs:/var/log/nginx:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    networks:
      - enterpriseos-network
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  # Backup Service
  backup:
    image: offen/docker-volume-backup:latest
    container_name: enterpriseos-backup
    restart: always
    environment:
      - BACKUP_CRON_EXPRESSION=0 2 * * *
      - BACKUP_FILENAME=enterpriseos-backup-%Y-%m-%d_%H-%M-%S.tar.gz
      - BACKUP_RETENTION_DAYS=30
      - AWS_S3_BUCKET_NAME=enterpriseos-backups
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_STOP_CONTAINER_LABEL=enterpriseos
    volumes:
      - app-cache:/backup/app-cache:ro
      - redis-data:/backup/redis-data:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - enterpriseos-network

volumes:
  app-cache:
  redis-data:
  nginx-logs:
  prometheus-data:
  grafana-data:
  loki-data:

networks:
  enterpriseos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16