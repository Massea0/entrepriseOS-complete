#!/bin/bash
# run-migrations.sh
# Script pour ex√©cuter les migrations Supabase

# Configuration
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}üöÄ Ex√©cution des migrations Supabase...${NC}"

# Fonction pour afficher un message de succ√®s
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fonction pour afficher une erreur
error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

# V√©rifier si Supabase CLI est install√©
if ! command -v supabase &> /dev/null; then
    echo -e "${YELLOW}üì¶ Installation de Supabase CLI...${NC}"
    npm install -g supabase
fi

# Appliquer les migrations
echo -e "\n${YELLOW}üìÑ Application de la migration 001_create_quotes_contracts_tables.sql...${NC}"

# Utiliser Supabase CLI pour appliquer la migration
if npx supabase db push; then
    success "Migration appliqu√©e avec succ√®s"
else
    error "Erreur lors de l'application de la migration"
    echo -e "${YELLOW}üí° Essai avec psql direct...${NC}"
    
    # Essayer avec psql si Supabase CLI √©choue
    if [ -n "$DATABASE_URL" ]; then
        psql "$DATABASE_URL" -f supabase/migrations/001_create_quotes_contracts_tables.sql
        if [ $? -eq 0 ]; then
            success "Migration appliqu√©e via psql"
        else
            error "√âchec de la migration via psql"
            exit 1
        fi
    else
        error "DATABASE_URL non d√©finie. Veuillez la configurer dans .env"
        exit 1
    fi
fi

# G√©n√©rer les types TypeScript
echo -e "\n${YELLOW}üîß G√©n√©ration des types TypeScript...${NC}"
if npx supabase gen types typescript --local > src/types/supabase.ts; then
    success "Types g√©n√©r√©s avec succ√®s"
else
    error "Erreur lors de la g√©n√©ration des types"
fi

echo -e "\n${GREEN}‚ú® Migrations termin√©es !${NC}"